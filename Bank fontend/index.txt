<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bank Management System</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: '#2563eb',
            secondary: '#1e40af',
            accent: '#7c3aed'
          }
        }
      }
    }
  </script>
  <style>
    .hide-scrollbar::-webkit-scrollbar {
      display: none;
    }
    
    [data-role="admin"] {
      border-left: 4px solid #7c3aed;
    }
    
    .fade-in {
      animation: fadeIn 0.3s ease-in;
    }
    
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  </style>
</head>
<body class="bg-gray-100 font-sans">
  <!-- Auth Container (Initially visible) -->
  <div id="auth-container" class="min-h-screen flex items-center justify-center p-4 bg-gradient-to-r from-blue-50 to-purple-50">
    <div class="w-full max-w-md bg-white rounded-xl shadow-lg overflow-hidden">
      <div class="p-8">
        <div class="flex justify-center mb-6">
          <h1 class="text-3xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
            Bank Portal
          </h1>
        </div>
        
        <!-- Login Form -->
        <form id="login-form" class="space-y-4">
          <div>
            <label for="username" class="block text-sm font-medium text-gray-700 mb-1">Username</label>
            <input type="text" id="username" required 
                   class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition">
          </div>
          
          <div>
            <label for="password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <input type="password" id="password" required
                   class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition">
          </div>
          
          <button type="submit" id="login-btn" class="w-full py-2 px-4 bg-primary hover:bg-secondary text-white font-medium rounded-lg transition flex items-center justify-center">
            <span>Sign In</span>
            <svg id="login-spinner" class="hidden w-5 h-5 ml-2 text-white animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </button>
        </form>
      </div>
    </div>
  </div>

  <!-- Main App Container (Hidden initially) -->
  <div id="app-container" class="hidden min-h-screen">
    <!-- Header -->
    <header class="bg-white shadow-sm">
      <div class="max-w-7xl mx-auto px-4 py-4 sm:px-6 lg:px-8 flex justify-between items-center">
        <h1 class="text-xl font-bold bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent">
          Bank Management System
        </h1>
        <div class="flex items-center space-x-4">
          <span id="user-email" class="text-sm text-gray-600"></span>
          <button id="logout-btn" class="text-sm text-red-600 hover:text-red-800">Logout</button>
        </div>
      </div>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 py-6 sm:px-6 lg:px-8 grid grid-cols-1 md:grid-cols-4 gap-6">
      <!-- Sidebar -->
      <div class="md:col-span-1 bg-white p-4 rounded-lg shadow">
        <nav>
          <ul class="space-y-2">
            <li>
              <a href="#dashboard" class="block px-3 py-2 rounded bg-blue-50 text-primary font-medium">Dashboard</a>
            </li>
            <li>
              <a href="#transactions" class="block px-3 py-2 rounded hover:bg-gray-50">Transactions</a>
            </li>
            <li>
              <a href="#transfer" class="block px-3 py-2 rounded hover:bg-gray-50">Transfer Money</a>
            </li>
            <li id="admin-nav-item" class="hidden" data-role="admin">
              <a href="#admin" class="block px-3 py-2 rounded hover:bg-purple-50 text-accent">Admin Panel</a>
            </li>
          </ul>
        </nav>
      </div>

      <!-- Content Area -->
      <div class="md:col-span-3 space-y-6">
        <!-- Dashboard Section -->
        <section id="dashboard-section" class="bg-white p-6 rounded-lg shadow fade-in">
          <h2 class="text-xl font-semibold mb-4">Account Overview</h2>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <div class="bg-blue-50 p-4 rounded-lg">
              <h3 class="text-sm font-medium text-blue-800">Account Number</h3>
              <p id="account-number" class="text-2xl font-bold text-blue-900">Loading...</p>
            </div>
            <div class="bg-green-50 p-4 rounded-lg">
              <h3 class="text-sm font-medium text-green-800">Current Balance</h3>
              <p id="account-balance" class="text-2xl font-bold text-green-900">Loading...</p>
            </div>
            <div class="bg-purple-50 p-4 rounded-lg">
              <h3 class="text-sm font-medium text-purple-800">Account Type</h3>
              <p id="account-type" class="text-2xl font-bold text-purple-900">Loading...</p>
            </div>
          </div>
          
          <div class="mb-6">
            <h3 class="text-lg font-medium mb-2">Personal Information</h3>
            <div class="bg-gray-50 p-4 rounded-lg">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <p class="text-sm text-gray-500">Full Name</p>
                  <p id="user-name" class="font-medium">Loading...</p>
                </div>
                <div>
                  <p class="text-sm text-gray-500">Username</p>
                  <p id="user-name-info" class="font-medium">Loading...</p>
                </div>
                <div>
                  <p class="text-sm text-gray-500">Phone</p>
                  <p id="user-phone" class="font-medium">Loading...</p>
                </div>
                <div>
                  <p class="text-sm text-gray-500">Address</p>
                  <p id="user-address" class="font-medium">Loading...</p>
                </div>
              </div>
            </div>
          </div>
        </section>

        <!-- Transactions Section -->
        <section id="transactions-section" class="bg-white p-6 rounded-lg shadow hidden fade-in">
          <h2 class="text-xl font-semibold mb-4">Transaction History</h2>
          <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Description</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Amount</th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
                </tr>
              </thead>
              <tbody id="transactions-list" class="bg-white divide-y divide-gray-200">
                <tr>
                  <td colspan="4" class="px-6 py-4 text-center text-gray-500">Loading transactions...</td>
                </tr>
              </tbody>
            </table>
          </div>
        </section>

        <!-- Transfer Money Section -->
        <section id="transfer-section" class="bg-white p-6 rounded-lg shadow hidden fade-in">
          <h2 class="text-xl font-semibold mb-4">Transfer Money</h2>
          <form id="transfer-form" class="space-y-4 max-w-md">
            <div>
              <label for="recipient-account" class="block text-sm font-medium text-gray-700">Recipient Account</label>
              <input type="text" id="recipient-account" required
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition">
            </div>
            <div>
              <label for="amount" class="block text-sm font-medium text-gray-700">Amount</label>
              <input type="number" id="amount" min="0.01" step="0.01" required
                     class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition">
            </div>
            <div>
              <label for="description" class="block text-sm font-medium text-gray-700">Description</label>
              <textarea id="description" rows="3"
                        class="w-full px-4 py-2 rounded-lg border border-gray-300 focus:ring-2 focus:ring-primary focus:border-primary transition"></textarea>
            </div>
            <button type="submit" id="transfer-btn" class="w-full py-2 px-4 bg-primary hover:bg-secondary text-white font-medium rounded-lg transition flex items-center justify-center">
              <span>Transfer Funds</span>
              <svg id="transfer-spinner" class="hidden w-5 h-5 ml-2 text-white animate-spin" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
            </button>
          </form>
        </section>

        <!-- Admin Section -->
        <section id="admin-section" class="bg-white p-6 rounded-lg shadow hidden fade-in">
          <h2 class="text-xl font-semibold mb-4">Admin Panel</h2>
          <div class="space-y-6">
            <div>
              <h3 class="text-lg font-medium mb-2">All Users</h3>
              <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                  <thead class="bg-gray-50">
                    <tr>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Name</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Email</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Role</th>
                      <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
                    </tr>
                  </thead>
                  <tbody id="users-list" class="bg-white divide-y divide-gray-200">
                    <tr>
                      <td colspan="4" class="px-6 py-4 text-center text-gray-500">Loading users...</td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </section>
      </div>
    </main>
  </div>

  <!-- Notification Toast -->
  <div id="notification" class="fixed bottom-4 right-4 p-4 rounded-lg shadow-lg bg-gray-800 text-white hidden"></div>

  <script>
    // API Configuration
    const API_BASE_URL = 'http://localhost:8080/api/v1';
    
    // DOM Elements
    const authContainer = document.getElementById('auth-container');
    const appContainer = document.getElementById('app-container');
    const loginForm = document.getElementById('login-form');
    const loginBtn = document.getElementById('login-btn');
    const loginSpinner = document.getElementById('login-spinner');
    const logoutBtn = document.getElementById('logout-btn');
    const transferBtn = document.getElementById('transfer-btn');
    const transferSpinner = document.getElementById('transfer-spinner');
    const notification = document.getElementById('notification');
    const adminNavItem = document.getElementById('admin-nav-item');

    // Current View Management
    let currentView = 'dashboard';
    const views = {
      dashboard: document.getElementById('dashboard-section'),
      transactions: document.getElementById('transactions-section'),
      transfer: document.getElementById('transfer-section'),
      admin: document.getElementById('admin-section')
    };

    // Router for navigation
    document.querySelectorAll('a[href^="#"]').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const view = e.target.getAttribute('href').substring(1);
        showView(view);
      });
    });

    function showView(view) {
      // Hide all views
      Object.values(views).forEach(v => {
        if (v) v.classList.add('hidden');
      });
      
      // Show selected view
      if (views[view]) {
        views[view].classList.remove('hidden');
        currentView = view;
        
        // Load data for the view if needed
        if (view === 'transactions') {
          loadTransactions();
        } else if (view === 'admin') {
          loadAdminData();
        }
      }
    }

    // Notification system
    function showNotification(message, isError = false) {
      notification.textContent = message;
      notification.className = `fixed bottom-4 right-4 p-4 rounded-lg shadow-lg ${isError ? 'bg-red-600' : 'bg-gray-800'} text-white fade-in`;
      notification.classList.remove('hidden');
      
      setTimeout(() => {
        notification.classList.add('hidden');
      }, 3000);
    }

    // Authentication Functions
    async function login(username, password) {
      try {
        loginBtn.disabled = true;
        loginSpinner.classList.remove('hidden');
        
        const response = await fetch(`${API_BASE_URL}/auth/login`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            username: username,
            password: password
          })
        });
        
        const data = await response.json();
        
        if (!response.ok) {
          throw new Error(data.message || 'Login failed');
        }
        
        // Store token and user data
        localStorage.setItem('token', data.token);
        localStorage.setItem('user', JSON.stringify(data.user));
        
        // Show main app
        authContainer.classList.add('hidden');
        appContainer.classList.remove('hidden');
        
        // Update UI
        document.getElementById('user-email').textContent = data.user.email;
        loadUserData();
        
        // Show admin nav if user is admin
        if (data.user.roles.includes('ROLE_ADMIN')) {
          adminNavItem.classList.remove('hidden');
        }
        
      } catch (error) {
        showNotification(error.message, true);
      } finally {
        loginBtn.disabled = false;
        loginSpinner.classList.add('hidden');
      }
    }

    function logout() {
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      authContainer.classList.remove('hidden');
      appContainer.classList.add('hidden');
      loginForm.reset();
    }

    // API Request Helper
    async function makeAuthenticatedRequest(url, method = 'GET', body = null) {
      const token = localStorage.getItem('token');
      if (!token) {
        logout();
        throw new Error('Not authenticated');
      }
      
      const headers = {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      };
      
      const options = {
        method,
        headers
      };
      
      if (body) {
        options.body = JSON.stringify(body);
      }
      
      const response = await fetch(`${API_BASE_URL}${url}`, options);
      const data = await response.json();
      
      if (!response.ok) {
        throw new Error(data.message || 'Request failed');
      }
      
      return data;
    }

    // Data Loading Functions
    async function loadUserData() {
      try {
        const userData = await makeAuthenticatedRequest('/users/me');
        const accountData = await makeAuthenticatedRequest('/accounts/my-account');
        
        // Update dashboard
        document.getElementById('user-name').textContent = userData.name;
        document.getElementById('user-email-info').textContent = userData.email;
        document.getElementById('user-phone').textContent = userData.phone || 'Not provided';
        document.getElementById('user-address').textContent = userData.address || 'Not provided';
        
        document.getElementById('account-number').textContent = accountData.accountNumber;
        document.getElementById('account-balance').textContent = `$${accountData.balance.toFixed(2)}`;
        document.getElementById('account-type').textContent = accountData.accountType;
        
      } catch (error) {
        showNotification(error.message, true);
      }
    }

    async function loadTransactions() {
      try {
        const transactions = await makeAuthenticatedRequest('/transactions/my-transactions');
        const tbody = document.getElementById('transactions-list');
        tbody.innerHTML = '';
        
        if (transactions.length === 0) {
          tbody.innerHTML = `<tr><td colspan="4" class="px-6 py-4 text-center text-gray-500">No transactions found</td></tr>`;
          return;
        }
        
        transactions.forEach(transaction => {
          const row = document.createElement('tr');
          row.className = 'hover:bg-gray-50';
          
          const dateCell = document.createElement('td');
          dateCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
          dateCell.textContent = new Date(transaction.timestamp).toLocaleString();
          
          const descCell = document.createElement('td');
          descCell.className = 'px-6 py-4 text-sm text-gray-500';
          descCell.textContent = transaction.description || 'No description';
          
          const amountCell = document.createElement('td');
          amountCell.className = `px-6 py-4 whitespace-nowrap text-sm font-medium ${transaction.amount >= 0 ? 'text-green-600' : 'text-red-600'}`;
          amountCell.textContent = `$${Math.abs(transaction.amount).toFixed(2)}`;
          
          const statusCell = document.createElement('td');
          statusCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
          
          const statusSpan = document.createElement('span');
          statusSpan.className = `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            transaction.status === 'COMPLETED' ? 'bg-green-100 text-green-800' : 
            transaction.status === 'PENDING' ? 'bg-yellow-100 text-yellow-800' : 'bg-red-100 text-red-800'
          }`;
          statusSpan.textContent = transaction.status;
          statusCell.appendChild(statusSpan);
          
          row.appendChild(dateCell);
          row.appendChild(descCell);
          row.appendChild(amountCell);
          row.appendChild(statusCell);
          tbody.appendChild(row);
        });
        
      } catch (error) {
        showNotification(error.message, true);
      }
    }

    async function loadAdminData() {
      try {
        const users = await makeAuthenticatedRequest('/admin/users');
        const tbody = document.getElementById('users-list');
        tbody.innerHTML = '';
        
        users.forEach(user => {
          const row = document.createElement('tr');
          row.className = 'hover:bg-gray-50';
          
          const nameCell = document.createElement('td');
          nameCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-900';
          nameCell.textContent = user.name;
          
          const emailCell = document.createElement('td');
          emailCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
          emailCell.textContent = user.email;
          
          const roleCell = document.createElement('td');
          roleCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-500';
          roleCell.textContent = user.roles.includes('ROLE_ADMIN') ? 'Admin' : 'User';
          
          const actionCell = document.createElement('td');
          actionCell.className = 'px-6 py-4 whitespace-nowrap text-sm font-medium';
          
          if (!user.roles.includes('ROLE_ADMIN')) {
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'text-red-600 hover:text-red-900';
            deleteBtn.textContent = 'Delete';
            deleteBtn.addEventListener('click', () => deleteUser(user.id));
            actionCell.appendChild(deleteBtn);
          }
          
          row.appendChild(nameCell);
          row.appendChild(emailCell);
          row.appendChild(roleCell);
          row.appendChild(actionCell);
          tbody.appendChild(row);
        });
        
      } catch (error) {
        showNotification(error.message, true);
      }
    }

    async function deleteUser(userId) {
      if (!confirm('Are you sure you want to delete this user?')) return;
      
      try {
        await makeAuthenticatedRequest(`/admin/users/${userId}`, 'DELETE');
        showNotification('User deleted successfully');
        loadAdminData();
      } catch (error) {
        showNotification(error.message, true);
      }
    }

    // Transfer Money
    document.getElementById('transfer-form').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const recipientAccount = document.getElementById('recipient-account').value;
      const amount = parseFloat(document.getElementById('amount').value);
      const description = document.getElementById('description').value;
      
      if (isNaN(amount) || amount <= 0) {
        showNotification('Please enter a valid amount', true);
        return;
      }
      
      try {
        transferBtn.disabled = true;
        transferSpinner.classList.remove('hidden');
        
        await makeAuthenticatedRequest('/transactions/transfer', 'POST', {
          toAccountNumber: recipientAccount,
          amount: amount,
          description: description
        });
        
        showNotification('Transfer successful!');
        document.getElementById('transfer-form').reset();
        loadUserData();
        loadTransactions();
        
      } catch (error) {
        showNotification(error.message, true);
      } finally {
        transferBtn.disabled = false;
        transferSpinner.classList.add('hidden');
      }
    });

    // Event Listeners
    loginForm.addEventListener('submit', (e) => {
      e.preventDefault();
      const email = document.getElementById('email').value;
      const password = document.getElementById('password').value;
      login(email, password);
    });

    logoutBtn.addEventListener('click', logout);

    // Check if user is already logged in
    function init() {
      const token = localStorage.getItem('token');
      const user = JSON.parse(localStorage.getItem('user'));
      
      if (token && user) {
        authContainer.classList.add('hidden');
        appContainer.classList.remove('hidden');
        document.getElementById('user-email').textContent = user.email;
        
        if (user.roles.includes('ROLE_ADMIN')) {
          adminNavItem.classList.remove('hidden');
        }
        
        loadUserData();
        loadTransactions();
      }
    }

    // Initialize the app
    init();
  </script>
</body>
</html>
async function loadTransactions(accountNumber) {
  try {
    const response = await fetch(`${BASE_URL}/bank/${accountNumber}/transactions`, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error("Failed to fetch transactions");
    }

    const transactions = await response.json();
    const tbody = document.getElementById("transaction-body");
    tbody.innerHTML = "";

    transactions.forEach(txn => {
      const row = document.createElement("tr");
      row.innerHTML = `
        <td>${txn.type}</td>
        <td>₹${txn.amount}</td>
        <td>${new Date(txn.timestamp).toLocaleString()}</td>
      `;
      tbody.appendChild(row);
    });

  } catch (err) {
    console.error("Error fetching transactions:", err);
    alert("Error: " + err.message);
  }
}